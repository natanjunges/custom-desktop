#!/usr/bin/env sh

# Custom Desktop Builder, scripts to build the metapackages for Custom Desktop.
# Copyright (C) 2022  Natan Junges <natanajunges@gmail.com>
#
# Custom Desktop Builder is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# Custom Desktop Builder is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Custom Desktop Builder.  If not, see <https://www.gnu.org/licenses/>.

. ../common/dialog.sh

errno=1
clear
minimal=$(dialog_title Edition; dialog_menu "Which edition is being built?" 0 Minimal 1 Full)
err=$?

if [ $err != 0 ]; then
    exit $errno
fi

errno=$((errno + 1))
clear
op=$(dialog_title Operation; dialog_menu "Choose the desired operation:" 1 Initialize 2 "Execute rounds" 3 "Generate metapackage control file")
err=$?

if [ $err != 0 ]; then
    exit $errno
fi

errno=$((errno + 1))
clear

case $op in
    1)
        part=$(dialog_title "Initialize - Part"; dialog_menu "Choose the desired part:" 1 "Part 1" 2 "Part 2")
        err=$?

        if [ $err != 0 ]; then
            exit $errno
        fi

        errno=$((errno + 1))
        clear

        case $part in
            1)
                dialog_title "Running initialization part 1..."

                if [ $minimal = 0 ]; then
                    ./init-1.sh || exit $errno
                else
                    errno=$((errno + 1))
                    ./init-1.sh --full || exit $errno
                fi

                echo Logout and login into the GNOME session
            ;;
            2) errno=$((errno + 2)); dialog_title "Running initialization part 2..."; ./init-2.sh && echo Restart your machine || exit $errno;;
        esac
    ;;
    2)
        errno=$((errno + 4))

        while :; do
            round=$(($(ls -1 -t ./build/round-*-step-*-full 2> /dev/null | head -n 1 | sed "s|^./build/round-||; s/-step-[1-4]-full\$//" || echo 0) + 1))
            step=0

            if [ -e ./build/round-*-step-2-full ]; then
                step=2
            fi

            while :; do
                step=$((step + 1))
                clear
                dialog_title "Running round $round step $step..."
                wait_confirm

                if [ $step -gt 2 ]; then
                    grep "^[^#]" ./build/round-*-step-2-diff | tr -d "*" | sed ":a; $!N; s/\n/ /; ta" | ./step-$step.sh > ./build/round-$round-step-$step-full || exit $errno
                    errno=$((errno + 2))
                else
                    errno=$((errno + 1))
                    ./step-$step.sh > ./build/round-$round-step-$step-full || exit $errno
                    errno=$((errno + 1))
                fi

                clear
                last_round=$(ls -1 -t ./build/round-*-step-$step-full | head -n 2 | tail -n 1 | sed "s|^./build/round-||; s/-step-$step-full\$//")

                if [ $last_round = $round ] || diff ./build/round-$last_round-step-$step-full ./build/round-$round-step-$step-full | grep -q "^> "; then
                    if [ $step = 4 ]; then
                        dialog_title "Running round $round step 5..."
                        wait_confirm
                        grep "^[^#]" ./build/round-*-step-2-diff | tr -d "*" | sed ":a; $!N; s/\n/ /; ta" | ./step-5.sh > ./build/round-$round-step-5-diff || exit $errno
                        clear
                    fi

                    errno=$((errno + 1))

                    if [ $last_round = $round ]; then
                        cp ./build/round-$round-step-$step-full ./build/round-$round-step-$step-diff
                    else
                        diff ./build/round-$last_round-step-$step-full ./build/round-$round-step-$step-full | grep "^> " | sed "s/^> //" > ./build/round-$round-step-$step-diff
                    fi

                    nano ./build/round-$round-step-$step-diff
                    dialog_title "Purging packages from round $round step $step..."
                    wait_confirm
                    ../common/purge.sh < ./build/round-$round-step-$step-diff || exit $errno
                    errno=$((errno - 3))
                    break
                else
                    errno=$((errno + 2))
                    dialog_title "Removing ./build/round-$round-step-$step-full..."
                    wait_confirm
                    rm ./build/round-$round-step-$step-full || exit $errno
                    errno=$((errno - 4))

                    if [ $step = 4 ]; then
                        break 2
                    fi
                fi
            done
        done
    ;;
    3)
        errno=$((errno + 9))
        dialog_title "Generating control file..."

        if [ $minimal = 0 ]; then
            ./finish.sh || exit $errno
        else
            errno=$((errno + 1))
            ./finish.sh --full || exit $errno
        fi
    ;;
esac
